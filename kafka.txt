kafka

Topics和Logs
Topic（主题）是一个订阅源，将所有相关的信息可以发送到一个Topic中。（消费者很多时候只关注一个Topic中的信息）

同一个Topic可以有很多个分区partition，每一个partition是一个有序的不可变的消息，（持续追加到commit log中）。
在partition中的消息会有一个序列id称作offset来唯一标识在这个partition中的消息。
无论partition中的消息是否被消费，kafka都会持久化所有的消息记录。（这个保留期限是可以配置的）

消费者唯一需要维护的是一个offset。消费者可以任意改变offset来消费数据。
kafka只提供partition内部有序的方案，没有全局有序的方案。

kafka和JMS的区别

kafka 和JMS实现(activeMQ)不同的是:即使消息被消费,消息仍然不会被立即删除.
日志文件（commit log）将会根据broker中的配置要求,保留一定的时间之后删除;比如log文件保留2天,那么两天后,文件会被清除,
无论其中的消息是否被消费.kafka通过这种简单的手段,来释放磁盘空间.
此外,kafka的性能并不会因为日志文件的太多而低下,所以即使保留较多的log文件,也不会有问题.







































使用kafka和redis实现消息队列的区别

kafka是一个分布式场景下的数据流处理平台，支持发布订阅模式，消费者可以订阅Topic进行消费，并且同一个Topic可以有多个Partition，
可以实现负载均衡。使用kafka作为消息队列可以保证消息的可靠性，但是会有一定的延迟。另外使用kafka无法保证消息的全局顺序性。

Redis内置数据结构list可以实现简单的消息队列
redis不支持消息分组，实时性强但是可能会出现消息丢失的情况。
（虽然Redis有持久化策略，但是也无法保证数据完全不丢失）

