
短声明变量 := 必须使用在函数中，如果在函数外声明变量需要使用var

局部变量声明了必须使用

iota :
1.遇到const关键字变为0
2.每增加一行常量声明iota自增1
iota相当于是行索引

const (
 a1 = iota //0
 a2 //1
 a3 //2
)


数据类型
有符号int8,int16,int32,int64
无符号uint8,uint16,uint32,uint64

特殊整型
uint:在32位机器是uint32，在64位机器是uint64
int:在32位机器是int32，在64位机器是int64
uintptr:无符号整型 用于存放一个指针

字符串
go语言字符串只能用双引号包裹
单引号包裹的是字符

rune 就是int32

字符
字符有两种
1.uint8或者叫byte 代表一个ASCALL码
2.rune类型 代表一个UTF-8类型字符

对于英文字母可以用byte表示，但是对于其他字符需要用rune类型表示

bool类型不能和其他类型强制转换

switch n {
case 1:
	fallthrough
//使用 fallthrough 会强制执行后面的 case 语句，fallthrough 不会判断下一条 case 的表达式结果是否为 true
case 2:
case 3:
default:
}

指针数组：数组中的元素都是指针类型 var a [3]*int // a数组是一个数组，他的每一个元素都是一个指向int类型数据的指针
数组指针：var a *[3]int //表示a是一个指针，指向了一个大小为3的int类型数组的首地址


切片slice：切片是一个具有相同类型的变长数组，它是一个指针类型，内部结构包含 地址 长度 容量

定义切片 var a []int  //注意不需要声明长度 数组是需要声明长度的
切片默认是nil

切片指向了一个底层的数组
切片的长度就是其元素的个数
切片的容量是底层数组从切片的第一个元素开始到最后一个元素的数量

切片扩容策略
1.newcap>2*oldcap newcap = 2*oldcap
2.oldcap<1024 newcap = 2*oldcap
3.从oldcap开始循环增加原来长度的1/4知道满足newcap

make和new的区别
make用来给map,slice,chan分配内存空间，它的返回值是对应的map,slice,chan。返回的就是变量。
new用来给struct,基本类型变量分配内存，如int,string。他的返回值是一个指针类型。（返回的是对应变量的地址）

按顺序遍历map只有把key放到切片中然后排序再通过key遍历map

struct 


定义结构体
type 名字 struct {
	field1 int
	field2 int
	field3 int
}

创建结构体的方式

var p person

var p = person{


}

p:=person{


}

p = new(person)



方法：
可以对包中的任意类型定义任意方法，而不仅仅是针对结构体
但是不能对来自其他包的类型或基础类型定义方法

error是一个interface,所以只要一个struct实现了Error方法，就可以用接口类型指向它


#####

go build ：用于测试编译包，在项目目录下生成可执行文件（有main包）。

go install：主要用来生成库和工具。
一是编译包文件（无main包），将编译后的包文件放到 pkg 目录下（$GOPATH/pkg）。
二是编译生成可执行文件（有main包），将可执行文件放到 bin 目录（$GOPATH/bin）。

相同点：都可以生成可执行文件。go build 在项目目录下生成可执行文件。go install 生成可执行文件放到bin目录中去。

不同点：1.go build 不能生成pkg。go install可以生成pkg。
        2.go build 生成的可执行文件在项目目录下，go install 生成的可执行文件在GOPATH/bin目录下。	

go get 命令可以借助代码管理工具通过远程拉取或更新代码包及其依赖包，并自动完成编译和安装。
需要安装与远程包匹配的代码管理工具，如 Git、SVN、HG 等，
这个命令在内部实际上分成了两步操作：第一步是下载源码包，第二步是执行 go install。
所以为了 go get 命令能正常工作，你必须确保安装了合适的源码管理工具，并同时把这些命令加入你的 PATH 中。其实 go get 支持自定义域名的功能。

参数介绍：
-d 只下载不安装
-f 只有在你包含了 -u 参数的时候才有效，不让 -u 去验证 import 中的每一个都已经获取了，这对于本地 fork 的包特别有用
-fix 在获取源码之后先运行 fix，然后再去做其他的事情
-t 同时也下载需要为运行测试所需要的包
-u 强制使用网络去更新包和它的依赖包
-v 显示执行的命令



#############os.Exit()

当使用os.Exit时，defers不会运行。




















